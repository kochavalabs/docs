"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[466],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),b=l(t),f=o,p=b["".concat(s,".").concat(f)]||b[f]||u[f]||c;return t?a.createElement(p,r(r({ref:n},d),{},{components:t})):a.createElement(p,r({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,r=new Array(c);r[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var l=2;l<c;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},1450:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var a=t(7462),o=t(3366),c=(t(7294),t(3905)),r=["components"],i={},s="Mazzaroth-js",l={unversionedId:"Developer_Tools/Mazzaroth_JS",id:"Developer_Tools/Mazzaroth_JS",title:"Mazzaroth-js",description:"CircleCI",source:"@site/../docs/4-Developer_Tools/3-Mazzaroth_JS.md",sourceDirName:"4-Developer_Tools",slug:"/Developer_Tools/Mazzaroth_JS",permalink:"/docs/docs/Developer_Tools/Mazzaroth_JS",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/4-Developer_Tools/3-Mazzaroth_JS.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mazzaroth Studio",permalink:"/docs/docs/Developer_Tools/Mazzaroth_Studio"},next:{title:"mazzaroth-rs",permalink:"/docs/docs/Developer_Tools/Mazzaroth_RS"}},d={},u=[{value:"Node Client",id:"node-client",level:2},{value:"Transaction Submit",id:"transaction-submit",level:3},{value:"Lookups",id:"lookups",level:3},{value:"Transaction Builder",id:"transaction-builder",level:3},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Node-Client",id:"node-client-1",level:3},{value:"License",id:"license",level:2}],b={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,r);return(0,c.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"mazzaroth-js"},"Mazzaroth-js"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://circleci.com/gh/kochavalabs/mazzaroth-js"},(0,c.kt)("img",{parentName:"a",src:"https://circleci.com/gh/kochavalabs/mazzaroth-js.svg?style=svg",alt:"CircleCI"}))),(0,c.kt)("p",null,"Mazzaroth-js is a javascript library that facilitates the interaction with\nMazzaroth nodes from both the browser or from ",(0,c.kt)("a",{parentName:"p",href:"https://nodejs.org/en/"},"node-js"),".\nIt does this by exporting two clients and some utility functions."),(0,c.kt)("h2",{id:"node-client"},"Node Client"),(0,c.kt)("p",null,"The node client is used to interact with a Mazzaroth node by abstracting some\nof the standard node operations. This includes encapsulating the node HTTP\nendpoints, signing operations, and the creation of a properly formed HTTP\nbody. The following functions are exposed:"),(0,c.kt)("h3",{id:"transaction-submit"},"Transaction Submit"),(0,c.kt)("p",null,"Submits a Transaction to a Mazzaroth node. These are transactions\nthat must be signed and will eventually be sent to the backing consensus\npool to be submitted to the blockchain. This includes transactions that\nupdate channel state including contract updates and authorization\ntransactions. Write transactions are submitted asynchronously and the\nresults must be looked up by querying the Receipt for the transaction ID that\nis returned. Readonly transactions will return the Receipt immediately."),(0,c.kt)("h3",{id:"lookups"},"Lookups"),(0,c.kt)("p",null,"There are several functions that allow you to lookup various information. These\ninclude TransactionLookup, BlockLookup, BlockList, BlockHeaderLookup, BlockHeaderList,\nReceiptLookup, and ChannelAbi. Lookup functions are synchronous read-only requests\nthat will get the latest state based on the non-consensus node that this lookup hits."),(0,c.kt)("h3",{id:"transaction-builder"},"Transaction Builder"),(0,c.kt)("p",null,"The Transaction builder provides a way to create and sign a transaction to be\nsubmitted with the Transaction Submit function.  The builder provides functionality\nto build a Call or Contract type transaction and set all the appropriate fields.\nThe Transaction is finalized by calling the Sign function, given a private key used\nto sign the transaction."),(0,c.kt)("h2",{id:"installation"},"Installation"),(0,c.kt)("p",null,"This library can be added to your project by using npm to install the\nmazzaroth-js package."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mazzaroth-js\n")),(0,c.kt)("h2",{id:"usage"},"Usage"),(0,c.kt)("p",null,"For a more detailed example of how to use the contract client in conjunction\nwith our CLI tools, XDR generation, and our XDR code generation tool: see the\nfull contract ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/full-contract-example"},"example"),"."),(0,c.kt)("h3",{id:"node-client-1"},"Node-Client"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"import { NodeClient, Ed25519KeyPairFromSeed, GenerateNonce } from 'mazzaroth-js'\n\nasync function demo() {\n  // Seed for the account is 0x64.\n  const accountSeed = '0'.repeat(64)\n  const keyPair = Ed25519KeyPairFromSeed(accountSeed)\n  const accountPrivKey = keyPair.priv\n  const accountID = keyPair.pub\n  const mazzNodeAddr = 'http://localhost:6299'\n  const channelID = '0'.repeat(64)\n  const nonce = GenerateNonce()\n  const blockExpirationNumber = '50'\n\n  // Create a client.\n  const client = new NodeClient(mazzNodeAddr)\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 1. Channel Abi lookup.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.ChannelAbi(channelID).then(x => x.toJSON())\n  console.log('>>> ChannelAbi')\n  console.log(res)\n\n  /*\n    {\n      version: '0.8.0',\n      functions: [\n        {\n          functionType: 2,\n          functionName: 'setup',\n          parameters: [],\n          returns: [Array]\n        }\n      ]\n    }\n  */\n\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 2. Build the transaction.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  const builder = new TransactionBuilder(accountID, channelID)\n  const transaction = builder.Call(nonce, blockExpirationNumber).Function('setup').Sign(accountPrivKey)\n  console.log('>>> TransactionBuilder')\n  console.log(transaction)\n  \n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 3. Submit the transaction.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n  res = await client.TransactionSubmit(transaction).then(x => x.toJSON())\n  console.log('>>> TransactionSubmit')\n  console.log(res)\n\n  /*\n    c97718cf2a7eb32b6e781b958907b0a6ded3a2dbf262b2a22e1773ef3ccec631'\n  */\n\n  // Wait for the transaction to be completed.\n  await new Promise(resolve => setTimeout(resolve, 2000))\n\n  // Save the transaction id.\n  const transactionID = res\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 4. Transaction lookup.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.TransactionLookup(channelID, transactionID).then(x => x.toJSON())\n  console.log('>>> TransactionLookup')\n  console.log(res)\n\n  /*\n    {\n      sender: '3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29',\n      signature: 'cd3b6675801da02f821b31166ba8230fbb3f356fef8d74a3eeb39c328876a41a84deba30b32103c237e5ff60e90690b715abd413fcd12428dec2b3f5656d1803',\n      data: {\n        channelID: '0000000000000000000000000000000000000000000000000000000000000000',\n        nonce: '76466',\n        blockExpirationNumber: '5',\n        category: { type: 1, data: [Object] }\n      }\n    }\n*/\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 5. Receipt lookup.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.ReceiptLookup(channelID, transactionID).then(x => x.toJSON())\n  console.log('>>> ReceiptLookup')\n  console.log(res)\n\n  /*\n    {\n      transactionID: 'c97718cf2a7eb32b6e781b958907b0a6ded3a2dbf262b2a22e1773ef3ccec631',\n      status: 1,\n      stateRoot: 'dbf6c9dd032b205f3b123f146d2d5106f1c177aaa1ac594b3e4a2814a1fdce14',\n      result: 'false',\n      statusInfo: ''\n    }\n  */\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 6. Block Height.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.BlockHeight(channelID).then(x => x.toJSON())\n  console.log('>>> BlockHeight')\n  console.log(res)\n\n  /*\n    { height: '3' }\n  */\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 7. Block List.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  const numberOfBlocks = 1\n  const height = res.height-1\n  res = await client.BlockList(channelID, height, numberOfBlocks).then(x => x)\n  console.log('>>> BlockList')\n  console.log(res)\n\n  /*\n    [\n      {\n        header: {\n          blockHeight: '2',\n          transactionHeight: '6',\n          consensusSequenceNumber: '0',\n          transactionsMerkleRoot: 'edc695c79edd9be248264dfff787ecc72c2ff762a4555e49ece8683691039248',\n          transactionsReceiptRoot: '220fbe9228a86a02f5dbe72d38e1429f334ada18b2d7f3ff08d0464db7f1ce4b',\n          stateRoot: 'dbf6c9dd032b205f3b123f146d2d5106f1c177aaa1ac594b3e4a2814a1fdce14',\n          previousHeader: '2a812fb66da23b488b8621451c648c807fee235b19144d7c8935512aa9ca89c0',\n          status: 0\n        },\n        transactions: [ [Object], [Object] ]\n      }\n    ]\n  */\n\n  // Save the previous header id.\n  const blockID = res[0].header.previousHeader\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 8. Block Header Lookup.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.BlockHeaderLookup(channelID, blockID).then(x => x.toJSON())\n  console.log('>>> BlockHeaderLookup')\n  console.log(res)\n\n  /*\n    {\n      blockHeight: '1',\n      transactionHeight: '4',\n      consensusSequenceNumber: '0',\n      transactionsMerkleRoot: '59e4e65812283231936f5d47feb0199d0b62cbf51953740ad95bc6accc3fc480',\n      transactionsReceiptRoot: '79a4668dff27414cc5a3cbf7d3be6e9d2af3ef9aff2b7e4e4aa95125a4996cc3',\n      stateRoot: 'dbf6c9dd032b205f3b123f146d2d5106f1c177aaa1ac594b3e4a2814a1fdce14',\n      previousHeader: '25bd4e8d88855ca58f5e92b850f0bd1f4bcf42dd7f42d57b74dca5880668dbd5',\n      status: 0\n    }\n  */\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 9. Block Lookup.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.BlockLookup(channelID, blockID).then(x => x.toJSON())\n  console.log('>>> BlockLookup')\n  console.log(res)\n\n  /*\n    {\n      header: {\n        blockHeight: '1',\n        transactionHeight: '4',\n        consensusSequenceNumber: '0',\n        transactionsMerkleRoot: '59e4e65812283231936f5d47feb0199d0b62cbf51953740ad95bc6accc3fc480',\n        transactionsReceiptRoot: '79a4668dff27414cc5a3cbf7d3be6e9d2af3ef9aff2b7e4e4aa95125a4996cc3',\n        stateRoot: 'dbf6c9dd032b205f3b123f146d2d5106f1c177aaa1ac594b3e4a2814a1fdce14',\n        previousHeader: '25bd4e8d88855ca58f5e92b850f0bd1f4bcf42dd7f42d57b74dca5880668dbd5',\n        status: 0\n      },\n      transactions: [\n        {\n          sender: '3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29',\n          signature: '81694afd7e051422be392b7fa3583e28f09e0a6130bd4b23f47ada5c77fd5714b26ad11ef71503bc30dca24b56804fdf82fc634ddb487661aaca1d5f27833d09',\n          data: [Object]\n        },\n        {\n          sender: '3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29',\n          signature: '429108eafbf249cb8e0e24bd3d8f11720e1f661a58b0d24bddb14e38312b9f23c1ab9cb16f516d9650793d21795d075ef0d09a58b60d0ea29a20415553c49109',\n          data: [Object]\n        }\n      ]\n    }\n  */\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // 10. Block Header List.\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  res = await client.BlockHeaderList(channelID, height, numberOfBlocks).then(x => x)\n  console.log('>>> BlockHeaderList')\n  console.log(res)\n\n  /*\n    [\n      {\n        blockHeight: '2',\n        transactionHeight: '6',\n        consensusSequenceNumber: '0',\n        transactionsMerkleRoot: 'edc695c79edd9be248264dfff787ecc72c2ff762a4555e49ece8683691039248',\n        transactionsReceiptRoot: '220fbe9228a86a02f5dbe72d38e1429f334ada18b2d7f3ff08d0464db7f1ce4b',\n        stateRoot: 'dbf6c9dd032b205f3b123f146d2d5106f1c177aaa1ac594b3e4a2814a1fdce14',\n        previousHeader: '2a812fb66da23b488b8621451c648c807fee235b19144d7c8935512aa9ca89c0',\n        status: 0\n      }\n    ]\n  */\n}\n\ndemo()\n")),(0,c.kt)("h2",{id:"license"},"License"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/mit/"},"MIT")))}f.isMDXComponent=!0}}]);