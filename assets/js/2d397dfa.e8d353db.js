"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[15],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(t),h=o,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return t?a.createElement(m,l(l({ref:n},d),{},{components:t})):a.createElement(m,l({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8666:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),l=["components"],i={},c="Deploying a Channel",s={unversionedId:"Tutorials/Deploying_a_Channel",id:"Tutorials/Deploying_a_Channel",title:"Deploying a Channel",description:"The first step to publish a smart contract to Mazzaroth is",source:"@site/../docs/5-Tutorials/2-Deploying_a_Channel.md",sourceDirName:"5-Tutorials",slug:"/Tutorials/Deploying_a_Channel",permalink:"/docs/docs/Tutorials/Deploying_a_Channel",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/5-Tutorials/2-Deploying_a_Channel.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Install Mazzaroth",permalink:"/docs/docs/Tutorials/Install_Mazzaroth"},next:{title:"Writing a Contract",permalink:"/docs/docs/Tutorials/Writing_a_Contract"}},d={},u=[{value:"Registering the Channel",id:"registering-the-channel",level:2},{value:"Deploy Nodes",id:"deploy-nodes",level:2},{value:"Consensus Network",id:"consensus-network",level:3},{value:"Standalone Node",id:"standalone-node",level:3},{value:"Upload a Contract",id:"upload-a-contract",level:2},{value:"Mazzaroth Command Line Tool: m8",id:"mazzaroth-command-line-tool-m8",level:2}],p={toc:u};function h(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploying-a-channel"},"Deploying a Channel"),(0,r.kt)("p",null,"The first step to publish a smart contract to Mazzaroth is\nto deploy a channel. Even if you are working from a standalone\nnode it is necessary to set up the Channel prior to\ndeploying a Contract."),(0,r.kt)("p",null,"There are a few steps to take depending on your end goal. If you are\nlooking to deploy a channel to the public Mazzaroth network it must\nbe ",(0,r.kt)("a",{parentName:"p",href:"#Registering-the-Channel"},"registered")," on the Mazzaroth channel.\nIf you want to set up your own private network or work directly off\nof a standalone node you can skip the registration step and just use\na custom channel id."),(0,r.kt)("h2",{id:"registering-the-channel"},"Registering the Channel"),(0,r.kt)("p",null,"The process for registering a channel on the public Mazzaroth network is\nstill a work in progress. More info on how to do this will be provided\nonce the network has been officially released."),(0,r.kt)("h2",{id:"deploy-nodes"},"Deploy Nodes"),(0,r.kt)("p",null,"To deploy a channel you must run Mazzaroth nodes that can process transactions.\nThis can be done with a ",(0,r.kt)("a",{parentName:"p",href:"#Consensus-Network"},"consensus network"),"\nor a single ",(0,r.kt)("a",{parentName:"p",href:"#Standalone-Node"},"standalone")," node."),(0,r.kt)("h3",{id:"consensus-network"},"Consensus Network"),(0,r.kt)("p",null,"To run a consensus network you will need at least four Consensus Nodes\nand a single Gateway node configured to connect to each other."),(0,r.kt)("p",null,"Currently, these node types have not been released for public use.\nDocumentation will be updated when these are made available."),(0,r.kt)("h3",{id:"standalone-node"},"Standalone Node"),(0,r.kt)("p",null,"To run a standalone node you can use the Mazzaroth docker image.\nThe command to run a standalone node with mounted data directory\nand exposed http port 6299 is provided below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Bash"},"docker run -p 6299:6299 --mount type=bind,src=/data,dst=/data kochavalabs/mazzaroth:latest node start standalone\n")),(0,r.kt)("p",null,'Things to note if using the default config values are that the standalone node will\nbe using the default channel ID of "0000000000000000000000000000000000000000000000000000000000000000".'),(0,r.kt)("p",null,"If you would like to use a different channel id this\ncan be provided as command line arguments to the start standalone command."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Bash"},"docker run -p 6299:6299 --mount type=bind,src=/data,dst=/data kochavalabs/mazzaroth:latest start standalone --channel.id 0000000000000000000000000000000000000000000000000000000000000000\n")),(0,r.kt)("h2",{id:"upload-a-contract"},"Upload a Contract"),(0,r.kt)("p",null,"Once you have a Gateway or Standalone node running you may upload\na contract to the channel by submitting a Deploy type Transaction."),(0,r.kt)("p",null,"This transaction includes the WebAssembly contract bytes and ABI and initializes\nthe Mazzaroth Virtual Machine (RothVM) for the nodes running the channel."),(0,r.kt)("p",null,"The JSON for a Deploy Transaction looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n "sender": "3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29",\n "signature": "41673b6ca7d17463a722ce6c2b9c0e5f68bf6f4d085530476c60341e11eb926305ea9730884a7807faf2484a5e6e8cef566479eea21628fcb3da2f48ab235bf3",\n "data": {\n  "channelID": "0000000000000000000000000000000000000000000000000000000000000000",\n  "nonce": "5304039207213195818",\n  "blockExpirationNumber": "100",\n  "category": {\n   "type": 2,\n   "data": {\n    "version": "0.0.1",\n    "owner": "3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29",\n    "abi": {\n     "version": "0.8.0",\n     "functions": [],\n    },\n    "contractHash": "6f5a561f67c1e874140ef682914e616a422fd336b67576709738876ca37080d1",\n    "contractBytes": "contract bytes"\n   }\n  }\n }\n}\n')),(0,r.kt)("p",null,"For more info about how to write and deploy a contract check out the\n",(0,r.kt)("a",{parentName:"p",href:"https://mazzaroth.io/docs/6-Tutorials/3-Writing_a_Contract.md"},"Writing a Contract"),"\ntutorial."),(0,r.kt)("h2",{id:"mazzaroth-command-line-tool-m8"},"Mazzaroth Command Line Tool: m8"),(0,r.kt)("p",null,"To help with deploying a contract, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/mazzaroth-cli"},"m8"),"\nincludes a deploy command."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Bash"},"m8 channel exec deployment --deployment-manifest deploy.yaml\n")),(0,r.kt)("p",null,"This command takes a YAML config file which should include the fields of the\nchannel configuration, the abi file, the contract wasm binary, and optional initial\ntransactions to execute on the contract. The config fields are described below."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Config"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.abi-file"),(0,r.kt)("td",{parentName:"tr",align:null},"Contract abi.json location.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.id"),(0,r.kt)("td",{parentName:"tr",align:null},"The channel ID as 64 character hex string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.name"),(0,r.kt)("td",{parentName:"tr",align:null},"The channel name as a readable string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.version"),(0,r.kt)("td",{parentName:"tr",align:null},"The contract version to set in the contract deploy.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.contract-file"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to the contract wasm file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.address"),(0,r.kt)("td",{parentName:"tr",align:null},"Web address for the mazzaroth node.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.owner"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the owner of the contract.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.transactions"),(0,r.kt)("td",{parentName:"tr",align:null},"A series of named initial transactions to execute after deploy.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.transactions.tx.args"),(0,r.kt)("td",{parentName:"tr",align:null},"Arguments to be sent to the function. Translated directly to transaction parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"channel.transactions.tx.function"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the contract function to call.")))),(0,r.kt)("p",null,"Example deploy.json:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},'version: 0.0.1\ntype: deployment\nchannel:\n  version: 0.0.1\n  id: 0000000000000000000000000000000000000000000000000000000000000000\n  owner: 3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29\n  contract-file: "./contract/target/wasm32-unknown-unknown/release/contract.wasm"\n  abi-file: "./contract/target/json/ExampleContract.json"\ngateway-node:\n  address: http://localhost:6299\ndeploy:\n  name: example-contract\n  transactions:\n    - tx:\n        function: "setup"\n')))}h.isMDXComponent=!0}}]);