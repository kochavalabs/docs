"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[270],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=l(n),p=a,m=h["".concat(c,".").concat(p)]||h[p]||d[p]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5971:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={},c="Data Structures",l={unversionedId:"Architecture/Data_Structures",id:"Architecture/Data_Structures",title:"Data Structures",description:"Mazzaroth uses various data structures to organize and store information.",source:"@site/../docs/3-Architecture/6-Data_Structures.md",sourceDirName:"3-Architecture",slug:"/Architecture/Data_Structures",permalink:"/docs/docs/Architecture/Data_Structures",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/3-Architecture/6-Data_Structures.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Storage",permalink:"/docs/docs/Architecture/Storage"},next:{title:"Blockchain",permalink:"/docs/docs/Architecture/Blockchain"}},u={},d=[{value:"Channels",id:"channels",level:2},{value:"Consensus",id:"consensus",level:2},{value:"Node Types",id:"node-types",level:2},{value:"Standalone Node",id:"standalone-node",level:3},{value:"Gateway Node",id:"gateway-node",level:3},{value:"Consensus Node",id:"consensus-node",level:3},{value:"Peer to Peer",id:"peer-to-peer",level:2},{value:"Membership",id:"membership",level:3},{value:"Distributed Ledger",id:"distributed-ledger",level:3},{value:"Merkle Tree",id:"merkle-tree",level:2}],h={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data-structures"},"Data Structures"),(0,o.kt)("p",null,"Mazzaroth uses various data structures to organize and store information.\nSome of these are described below."),(0,o.kt)("h2",{id:"channels"},"Channels"),(0,o.kt)("p",null,"Mazzaroth uses channels to separate networks that are running Mazzaroth nodes.\nWhen setting up a network in Mazzaroth you must use a unique id to identify\nwhich channel your nodes or transactions belong to."),(0,o.kt)("p",null,"Each channel will have its own state, ledger, and set of nodes that are participating.\nWhen a transaction is created it must specify the channel ID to ensure it is executed\nin the correct channel. This also prevents replay attacks by not allowing transactions\nto be played on multiple channels with the same data."),(0,o.kt)("p",null,"It is possible to start a private cluster of nodes to create a private channel\nby starting all nodes with the same channel ID. More support for channels including\ncross-channel communication and channel registration is currently under development."),(0,o.kt)("h2",{id:"consensus"},"Consensus"),(0,o.kt)("p",null,"Mazzaroth uses a version of Practical Byzantine Fault Tolerance (PBFT) consensus\nfor transaction ordering. This is a leader based ordering system which protects\nagainst faulty nodes while allowing a distributed network to reach consensus."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://pmg.csail.mit.edu/papers/osdi99.pdf"},"PBFT White Paper"))),(0,o.kt)("p",null,"Nodes may join a channel as a Consensus node in order to participate in the\nconsensus protocol. Gateway nodes in a channel will take incoming transactions\nfrom clients and submit them to a consensus node to have the transaction ordered\nand executed. The consensus may batch a number of transactions in a single\nrequest round to reduce the number of consensus messages that are needed to\nfinalize transactions. Once a round of consensus has completed for a batch of\ntransactions they can safely be executed and added to the ledger.\nThe participating consensus nodes will sign and notify other nodes in the network\nthat the transactions should be added."),(0,o.kt)("h2",{id:"node-types"},"Node Types"),(0,o.kt)("p",null,"A Mazzaroth Node is the application that performs one or more of the many roles\nrequired by the Mazzaroth ecosystem."),(0,o.kt)("p",null,"There are currently 3 types of nodes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Standalone-Node"},"Standalone")," nodes are useful for development, but do not connect\nto the distributed network of consensus nodes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Geadonly-Node"},"Gateway")," nodes provide users with access to the blockchain through\nRPCs but do not participate in consensus."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#Consensus-Node"},"Consensus")," nodes participate in a channel's consensus to facilitate\nordering and execution of transactions.")),(0,o.kt)("h3",{id:"standalone-node"},"Standalone Node"),(0,o.kt)("p",null,"A standalone node can be used as a development environment for Mazzaroth.\nIt provides a way to deploy and interact with a smart contract without\nneeding a network of nodes."),(0,o.kt)("h3",{id:"gateway-node"},"Gateway Node"),(0,o.kt)("p",null,"A gateway node is connected to the network but does not participate in consensus.\nThe main role of a gateway node is to allow clients to send requests to the channel\nincluding submitting transactions and requesting information from the ledger or state."),(0,o.kt)("h3",{id:"consensus-node"},"Consensus Node"),(0,o.kt)("p",null,"A consensus node is connected to the network and participates in\nthe consensus that accepts transactions into the channel.\nA consensus node does not allow requests from clients,\nbut does receive forwarded transactions from other gateway nodes in the network."),(0,o.kt)("h2",{id:"peer-to-peer"},"Peer to Peer"),(0,o.kt)("p",null,"Nodes within Mazzaroth communicate with each other\nthrough a multi-layered peer-to-peer network.\nNodes can join a global membership network that uses multiple channel ids and\nnode roles to run separate channels.\nIt is also possible to start a private cluster of nodes using\na single channel id with the same supported peer-to-peer network."),(0,o.kt)("h3",{id:"membership"},"Membership"),(0,o.kt)("p",null,"For keeping track of membership, Mazzaroth uses a version of the\nSWIM (Scalable Weakly-consistent Infection-style Process Group Membership) Protocol.\nNodes can connect to the network with a role and their membership is propagated\nthroughout the network. A node simply needs to connect to an existing member\nof the network in order to join."),(0,o.kt)("h3",{id:"distributed-ledger"},"Distributed Ledger"),(0,o.kt)("p",null,"Each type of node (gateway or consensus) will keep a record of transactions\nthat have been executed along with receipts in its Ledger.\nConsensus and Gateway nodes communicate to each other using a p2p protocol\nbacked by the membership to make sure transactions are propagated to all nodes\nin the network. With Consensus ordering we ensure that the ledger of each node\nparticipating in the network will match for a given height."),(0,o.kt)("h2",{id:"merkle-tree"},"Merkle Tree"),(0,o.kt)("p",null,"A Merkle Tree is a cryptographic data structure used to store data which can be\nefficiently verified across different peers. Merkle Trees are used to store\nledger data such as transactions and receipts and Contract State data. The\nMerkle Root hashes of all of these trees are stored in the Block Headers within\nthe ledger. The Merkle Root hashes can be used to verify that contents are identical\nto a peer."))}p.isMDXComponent=!0}}]);