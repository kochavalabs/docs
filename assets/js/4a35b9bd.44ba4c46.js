"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[560],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,s=t.parentName,d=l(t,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||r;return n?a.createElement(m,i(i({ref:e},d),{},{components:n})):a.createElement(m,i({ref:e},d))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8367:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_label:"Getting Started",sidebar_position:1},s="Mazzaroth",c={unversionedId:"Getting_Started",id:"Getting_Started",title:"Mazzaroth",description:"Introduction",source:"@site/../docs/1-Getting_Started.md",sourceDirName:".",slug:"/Getting_Started",permalink:"/docs/docs/Getting_Started",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/1-Getting_Started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Getting Started",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Account Creation",permalink:"/docs/docs/Account_Creation"}},d={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Writing a Smart Contract",id:"writing-a-smart-contract",level:2},{value:"Running a Node",id:"running-a-node",level:2},{value:"Standalone",id:"standalone",level:3},{value:"Gateway",id:"gateway",level:3},{value:"Consensus",id:"consensus",level:3},{value:"Interacting with a Node",id:"interacting-with-a-node",level:2},{value:"Deploy a Contract",id:"deploy-a-contract",level:3}],p={toc:u};function h(t){var e=t.components,n=(0,o.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mazzaroth"},"Mazzaroth"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Mazzaroth is a distributed ledger platform that allows people to write and\ndeploy decentralized smart contracts. The ecosystem is made up of a network\nof various nodes tied to channels that take part in a consensus process as\nwell as provide a service to clients to submit transactions and retrieve\ninformation from the ledger."),(0,r.kt)("h2",{id:"writing-a-smart-contract"},"Writing a Smart Contract"),(0,r.kt)("p",null,"A Mazzaroth Smart Contract is a WebAssembly binary that defines the functions\nthat may be called by transactions submitted to the channel and how data is\nstored in state for that channel. There are many different ways to write code\nthat can be compiled to WebAssembly. The requirement for it to be considered\na Mazzaroth Smart Contract is that it includes a main function and handles the\ninput object correctly."),(0,r.kt)("p",null,"We currently support Mazzaroth Smart Contracts written in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rust"},"Rust")," by leveraging the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/mazzaroth-rs"},"mazzaroth-rs")," library\nwith support for more languages on the horizon."),(0,r.kt)("p",null,"You can easily get started by using\n",(0,r.kt)("a",{parentName:"p",href:"https://studio.mazzaroth.io/"},"Mazzaroth Studio"),", the online IDE.\nIt allows you to start a new project from a template and then build and\ndownload the compiled WASM module that can be\n",(0,r.kt)("a",{parentName:"p",href:"#Interacting-with-a-Node"},"deployed")," as a Smart Contract."),(0,r.kt)("p",null,'After selecting a template, such as "Hello World", clicking the Build button\nwill compile the contract to a binary ',(0,r.kt)("inlineCode",{parentName:"p"},"wasm")," file and provide an abi.json\nfor your contract."),(0,r.kt)("p",null,"The Download button can be used to download all working files, including the\nbuilt files in the target directory."),(0,r.kt)("h2",{id:"running-a-node"},"Running a Node"),(0,r.kt)("p",null,"A Mazzaroth Node is the application that performs one or more of the many\nroles required by the Mazzaroth ecosystem."),(0,r.kt)("p",null,"To run one or more Mazzaroth Nodes you must have access to the Mazzaroth\nbinary, which is bundled with the GCP solution."),(0,r.kt)("p",null,"There are currently 3 types of nodes available to be deployed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Standalone"},"Standalone")," nodes are useful for development, but do not connect\nto the distributed network of consensus nodes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Gateway"},"Gateway")," nodes provide users with access to the blockchain\nthrough RPCs but do not participate in consensus."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#Consensus"},"Consensus")," nodes participate in a channel's consensus to\nfacilitate ordering and execution of transactions.")),(0,r.kt)("p",null,"The command to start a node is ",(0,r.kt)("inlineCode",{parentName:"p"},"mazzaroth node start")," followed by the type.\nCommand line flags may also be provided to override default config values or\nyou can use a config yaml file. For example, to start a standalone node with\na config file you can use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Bash"},"mazzaroth node start standalone --cfg-path my-config.yaml\n")),(0,r.kt)("p",null,"For the GCP standalone solution a systemd service is already setup and all that\nneeds to be updated is the ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/mazzaroth-config.yaml")," followed by a service\nrestart: ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo systemctl restart mazzaroth.service")),(0,r.kt)("h3",{id:"standalone"},"Standalone"),(0,r.kt)("p",null,"A standalone node can be used as a development environment for Mazzaroth.\nIt provides a way to deploy and interact with a smart contract without\nconnecting to the global network of nodes."),(0,r.kt)("h3",{id:"gateway"},"Gateway"),(0,r.kt)("p",null,"A gateway node is connected to the network but does not participate in consensus.\nThe main role of a gateway node is to allow clients to send requests to the\nchannel including submitting transactions and requesting information from\nthe ledger or state."),(0,r.kt)("h3",{id:"consensus"},"Consensus"),(0,r.kt)("p",null,"A consensus node is connected to the network and participates in the consensus\nthat accepts transactions into the channel. A consensus node does not allow\nrequests from clients, but does receive forwarded transactions from other\ngateway nodes in the network."),(0,r.kt)("h2",{id:"interacting-with-a-node"},"Interacting with a Node"),(0,r.kt)("p",null,"This guide will walk you through interacting with a Mazzaroth node.\nStandalone and Gateway nodes use HTTP to handle requests and can be used to\ndeploy contracts, submit transactions, or lookup information from the ledger."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/m8"},"m8")," is a command line tool\nto allow users to easily interact with Mazzaroth nodes."),(0,r.kt)("h3",{id:"deploy-a-contract"},"Deploy a Contract"),(0,r.kt)("p",null,"If you are running a Standalone node or are setting up a new channel the first\nthing you will need to do is deploy your contract. If you have not already\nwritten and compiled a contract to deploy first read the section on\n",(0,r.kt)("a",{parentName:"p",href:"#Writing-a-Smart-Contract"},"Writing a Smart Contract"),"."),(0,r.kt)("p",null,"Using m8, the command to deploy a contract is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Bash"},"m8 channel exec deployment --deployment-manifest deployment.yaml\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment.yaml")," is the path to a file containing the deployment\nconfiguration for the contract. An example deployment.yaml can be found\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/m8/blob/develop/examples/deployment.yaml"},"here"),"."))}h.isMDXComponent=!0}}]);