"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[968],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3277:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],c={},s="Deterministic Logic",u={unversionedId:"Architecture/Deterministic_Logic",id:"Architecture/Deterministic_Logic",title:"Deterministic Logic",description:"It is important that execution on the blockchain is deterministic,",source:"@site/../docs/3-Architecture/1-Deterministic_Logic.md",sourceDirName:"3-Architecture",slug:"/Architecture/Deterministic_Logic",permalink:"/docs/docs/Architecture/Deterministic_Logic",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/3-Architecture/1-Deterministic_Logic.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Account Creation",permalink:"/docs/docs/Account_Creation"},next:{title:"eXternal Data Representation",permalink:"/docs/docs/Architecture/XDR_Intro"}},l={},p=[{value:"Mazzaroth Virtual Machine",id:"mazzaroth-virtual-machine",level:2},{value:"XDR Serialization",id:"xdr-serialization",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deterministic-logic"},"Deterministic Logic"),(0,a.kt)("p",null,"It is important that execution on the blockchain is deterministic,\nmeaning that a given set of inputs always produce the same output.\nThis is because every transactions that gets accepted by the consensus\nnetwork is executed separately but must produce the same results to ensure\nthat all nodes will share a consistent channel and ledger state."),(0,a.kt)("h2",{id:"mazzaroth-virtual-machine"},"Mazzaroth Virtual Machine"),(0,a.kt)("p",null,"The Mazzaroth Virtual Machine (RothVM) was designed in a way to limit actions\nthat would result in non-deterministic execution. By using the WebAssembly\ninstruction format and having strict control over what system interfaces are\navailable RothVM is able to ensure that the same results will occur on separate\nnodes running the same contract functions."),(0,a.kt)("h2",{id:"xdr-serialization"},"XDR Serialization"),(0,a.kt)("p",null,"Another way that Mazzaroth guarantees deterministic results is by using\n",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/External_Data_Representation"},"XDR")," serialization.\nXDR is a standard data serialization format that allows objects to be serialized\nand deserialized without different results. For example, Transactions are serialized\nusing XDR for persistent storage and since transaction data is signed it is important\nthat the serialization is deterministic so that the signature can be verified."))}m.isMDXComponent=!0}}]);