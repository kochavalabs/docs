"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[156],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9678:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={},s="XDR RS Serialize",c={unversionedId:"Developer_Tools/XDR_RS_Serialize",id:"Developer_Tools/XDR_RS_Serialize",title:"XDR RS Serialize",description:"CircleCI",source:"@site/../docs/4-Developer_Tools/8-XDR_RS_Serialize.md",sourceDirName:"4-Developer_Tools",slug:"/Developer_Tools/XDR_RS_Serialize",permalink:"/docs/docs/Developer_Tools/XDR_RS_Serialize",editUrl:"https://github.com/kochavalabs/docs/tree/main/../docs/4-Developer_Tools/8-XDR_RS_Serialize.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"XDR JS Serialize",permalink:"/docs/docs/Developer_Tools/XDR_JS_Serialize"},next:{title:"Install Mazzaroth",permalink:"/docs/docs/Tutorials/Install_Mazzaroth"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"License",id:"license",level:2},{value:"Notes",id:"notes",level:2}],d={toc:p};function f(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"xdr-rs-serialize"},"XDR RS Serialize"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://circleci.com/gh/kochavalabs/xdr-rs-serialize"},(0,o.kt)("img",{parentName:"a",src:"https://circleci.com/gh/kochavalabs/xdr-rs-serialize.svg?style=svg",alt:"CircleCI"}))),(0,o.kt)("p",null,"Xdr-rs-serialize is a library for facilitating the (de)serialization of rust\nobjects into the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/External_Data_Representation"},"XDR"),"\nformat."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"This library can be added to your project by using cargo to install the\nxdr-rs-serialize crate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo add xdr-rs-serialize\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use xdr_rs_serialize::de::XDRIn;\nuse xdr_rs_serialize::error::Error;\nuse xdr_rs_serialize::ser::XDROut;\n\nfn main() -> Result<(), Error> {\n    let mut byte_buffer = Vec::new();\n    "Hello world!".to_string().write_xdr(&mut byte_buffer)?;\n    // Notice that a tuple is returned with the String result at index 0 and\n    // total bytes read at index 1.\n    let hello_world: String = String::read_xdr(&mut &byte_buffer)?.0;\n    println!("{}", hello_world);\n    Ok(())\n}\n')),(0,o.kt)("p",null,"For a more complex example see the code under ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kochavalabs/xdr-rs-serialize/tree/develop/example"},"example/")),(0,o.kt)("h2",{id:"license"},"License"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/mit/"},"MIT")),(0,o.kt)("h2",{id:"notes"},"Notes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The XDR Quad type is currently not supported")))}f.isMDXComponent=!0}}]);